import React, { useState, useEffect } from "react";
import { useGame, initialPieces } from "../../pages/Game/GameContext";
import { resolveBattle } from "../../features/game/gameLogic";
import "./GameBoard.css";
import { PLAYER_SELF, PLAYER_OPPONENT } from "../../models/gameModel";

export default function GameBoard() {
  const {
    pieces,
    setPieces,
    BOARD_SIZE,
    currentPlayer,
    setCurrentPlayer,
    selectedPiece,
    setSelectedPiece,
    phase,
    setPhase,
    setupPlayerTurn,
    setSetupPlayerTurn,
  } = useGame();

  const [winner, setWinner] = React.useState(null);

  // Popup ‚Äú‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‚Äù ‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
  const [showTurnGate, setShowTurnGate] = useState(false);
  const [gatePlayer, setGatePlayer] = useState(null); // 'self' | 'opponent'

  // Popup ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
  const [battleResult, setBattleResult] = useState(null); // 'win' | 'lose' | 'draw' | null

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≠‡∏á valid moves ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [validMoves, setValidMoves] = useState([]);

  const resetGame = () => {
    setPieces(initialPieces);
    setSelectedPiece(null);
    setCurrentPlayer(PLAYER_SELF);
    setPhase("setup");
    setSetupPlayerTurn(PLAYER_SELF);
    setWinner(null);
    setShowTurnGate(false);
    setGatePlayer(null);
    setBattleResult(null);
  };

  // ‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏ñ‡πâ‡∏≤:
  // - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  // - ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ú‡∏¢ isRevealed
  // - ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á popup (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ï‡∏≤)
  const isPieceVisible = (piece) => {
    if (showTurnGate || battleResult) return false; // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á popup
    if (piece.owner === currentPlayer) return true;
    if (piece.isRevealed) return true;
    return false;
  };

  // ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏£‡∏á (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô logic ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß)
  function isPathClearHorizontal(y, x1, x2) {
    const minX = Math.min(x1, x2);
    const maxX = Math.max(x1, x2);
    for (let cx = minX + 1; cx < maxX; cx++) {
      if (pieces.some((p) => p.position.x === cx && p.position.y === y))
        return false;
    }
    return true;
  }
  function isPathClearVertical(x, y1, y2) {
    const minY = Math.min(y1, y2);
    const maxY = Math.max(y1, y2);
    for (let cy = minY + 1; cy < maxY; cy++) {
      if (pieces.some((p) => p.position.x === x && p.position.y === cy))
        return false;
    }
    return true;
  }

  // ‡∏´‡∏≤ valid moves ‡∏ï‡∏≤‡∏° role
  const getValidMoves = (piece) => {
    if (!piece) return [];
    const moves = [];
    const { position, role, owner } = piece;
    const directions = [
      [1, 0],
      [-1, 0],
      [0, 1],
      [0, -1],
    ];

    if (role === "paper") {
      for (const [dx, dy] of directions) {
        let nx = position.x + dx;
        let ny = position.y + dy;
        while (nx >= 0 && nx < BOARD_SIZE && ny >= 0 && ny < BOARD_SIZE) {
          if (pieces.some((p) => p.position.x === nx && p.position.y === ny))
            break;
          moves.push({ x: nx, y: ny });
          nx += dx;
          ny += dy;
        }
        const lastX = nx;
        const lastY = ny;
        const target = pieces.find(
          (p) => p.position.x === lastX && p.position.y === lastY
        );
        if (target && target.owner !== owner) {
          moves.push({ x: lastX, y: lastY });
        }
      }
    } else if (role === "scissors") {
      const knightMoves = [
        [2, 1],
        [2, -1],
        [-2, 1],
        [-2, -1],
        [1, 2],
        [1, -2],
        [-1, 2],
        [-1, -2],
      ];
      for (const [dx, dy] of knightMoves) {
        const nx = position.x + dx;
        const ny = position.y + dy;
        if (nx >= 0 && nx < BOARD_SIZE && ny >= 0 && ny < BOARD_SIZE) {
          const target = pieces.find(
            (p) => p.position.x === nx && p.position.y === ny
          );
          if (!target || target.owner !== owner) {
            moves.push({ x: nx, y: ny });
          }
        }
      }
    } else if (role === "rock") {
      const directions = [
        [1, 0],
        [-1, 0],
        [0, 1],
        [0, -1],
      ];
      for (const [dx, dy] of directions) {
        const nx = position.x + dx;
        const ny = position.y + dy;
        if (nx >= 0 && nx < BOARD_SIZE && ny >= 0 && ny < BOARD_SIZE) {
          const target = pieces.find(
            (p) => p.position.x === nx && p.position.y === ny
          );
          if (!target || target.owner !== owner) {
            moves.push({ x: nx, y: ny });
          }
        }
      }
    }

    return moves;
  };

  useEffect(() => {
    setValidMoves(getValidMoves(selectedPiece));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedPiece, pieces]);

  const onSelectPiece = (piece) => {
    if (showTurnGate || battleResult) return; // ‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á popup
    if (piece.owner !== currentPlayer) return;
    setSelectedPiece(piece);
  };

  const checkWinner = (ps) => {
    const selfPieces = ps.filter((p) => p.owner === "self");
    const opponentPieces = ps.filter((p) => p.owner === "opponent");

    if (selfPieces.length === 0 && opponentPieces.length === 0) {
      return "draw";
    } else if (selfPieces.length === 0) {
      return "opponent";
    } else if (opponentPieces.length === 0) {
      return "self";
    }

    // üî• ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞ 1 ‡∏ï‡∏±‡∏ß ‚Üí ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (selfPieces.length === 1 && opponentPieces.length === 1) {
      const selfRole = selfPieces[0].role;
      const oppRole = opponentPieces[0].role;
      if (selfRole === oppRole) return "draw";
      if (
        (selfRole === "rock" && oppRole === "scissors") ||
        (selfRole === "scissors" && oppRole === "paper") ||
        (selfRole === "paper" && oppRole === "rock")
      ) {
        return "self";
      } else {
        return "opponent";
      }
    }

    return null;
  };


  const onMove = (x, y) => {
    if (showTurnGate || battleResult) return; // ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á popup ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏ô
    if (!selectedPiece) return;

    const { position, role, owner } = selectedPiece;

    // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô validMoves
    if (!validMoves.some((m) => m.x === x && m.y === y)) return;

    const target = pieces.find((p) => p.position.x === x && p.position.y === y);

    // ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (target && target.owner === owner) return;

    let newPieces = pieces.filter((p) => p.id !== selectedPiece.id);
    let thisBattleResult = null; // 'win' | 'lose' | 'draw' | null

    if (target && target.owner !== owner) {
      const rb = resolveBattle(role, target.role);
      if (rb === "attacker") {
        newPieces = newPieces.filter((p) => p.id !== target.id);
        newPieces.push({
          ...selectedPiece,
          position: { x, y },
          isRevealed: true,
        });
        thisBattleResult = "win";
      } else if (rb === "defender") {
        // attacker ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        thisBattleResult = "lose";
      } else {
        // draw: ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
        newPieces = newPieces.filter((p) => p.id !== target.id);
        thisBattleResult = "draw";
      }
    } else {
      newPieces.push({ ...selectedPiece, position: { x, y } });
    }

    setPieces(newPieces);
    setSelectedPiece(null);

    const gameWinner = checkWinner(newPieces);
    if (gameWinner) {
      setWinner(gameWinner);
      return;
    }

    const nextPlayer = currentPlayer === "self" ? "opponent" : "self";

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô
    if (thisBattleResult) {
      setBattleResult(thisBattleResult);
      // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏ï‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î gate ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      // (‡∏î‡∏π‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á popup ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
    } else {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ ‡πÄ‡∏õ‡∏¥‡∏î popup gate ‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
      setGatePlayer(nextPlayer);
      setShowTurnGate(true);
    }
  };

  const renderPieceIcon = (piece) => {
    if (!isPieceVisible(piece)) {
      return <div className="piece-icon unknown">?</div>;
    }

    return (
      <div className={`piece-icon role-${piece.role} owner-${piece.owner}`}>
        {/* icon ‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏î‡∏î‡πâ‡∏ß‡∏¢ CSS */}
      </div>
    );
  };

  return (
    <div className="gameboard-container">
      <p className="current-player">
        ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô: {currentPlayer === "self" ? "Player 1" : "Player 2"}
      </p>

      {/* ‡∏õ‡πâ‡∏≤‡∏¢ Player 2 ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
      <div className="player-label top-label">Player 2</div>

      <div
        className="board-grid"
        style={{
          gridTemplateColumns: `repeat(${BOARD_SIZE}, 50px)`,
          gridTemplateRows: `repeat(${BOARD_SIZE}, 50px)`,
        }}
      >
        {[...Array(BOARD_SIZE)].map((_, y) =>
          [...Array(BOARD_SIZE)].map((_, x) => {
            const piece = pieces.find(
              (p) => p.position.x === x && p.position.y === y
            );
            const isSelected =
              selectedPiece &&
              selectedPiece.position.x === x &&
              selectedPiece.position.y === y;
            const canMoveHere = validMoves.some((m) => m.x === x && m.y === y);
            const isPointer =
              (piece && piece.owner === currentPlayer) ||
              (!piece && selectedPiece);

            return (
              <div
                key={`${x}-${y}`}
                className={`board-cell
                ${isSelected ? "selected" : ""}
                ${canMoveHere ? "can-move" : ""}
                ${isPointer ? "pointer" : ""}
              `}
                onClick={() => {
                  if (showTurnGate || battleResult) return;
                  if (piece && piece.owner === currentPlayer) {
                    onSelectPiece(piece);
                  } else {
                    onMove(x, y);
                  }
                }}
              >
                {piece && renderPieceIcon(piece)}
              </div>
            );
          })
        )}
      </div>

      {/* ‡∏õ‡πâ‡∏≤‡∏¢ Player 1 ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
      <div className="player-label bottom-label">Player 1</div>

      {/* Winner / Popup ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° */}
      {winner && (
        <div className="game-winner-dialog">
          <div className="dialog-content">
            <h2>
              {winner === "draw"
                ? "‡πÄ‡∏Å‡∏°‡πÄ‡∏™‡∏°‡∏≠!"
                : winner === "self"
                  ? "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!"
                  : "‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡∏ô‡∏∞!"}
            </h2>
            <button onClick={resetGame}>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà</button>
          </div>
        </div>
      )}

      {battleResult && (
        <div className="game-winner-dialog">
          <div className="dialog-content">
            <h2>
              {battleResult === "win"
                ? "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ!"
                : battleResult === "lose"
                  ? "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ!"
                  : "‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÄ‡∏™‡∏°‡∏≠"}
            </h2>
            <button
              onClick={() => {
                setBattleResult(null);
                const nextPlayer =
                  currentPlayer === "self" ? "opponent" : "self";
                setGatePlayer(nextPlayer);
                setShowTurnGate(true);
              }}
            >
              ‡∏ï‡∏Å‡∏•‡∏á
            </button>
          </div>
        </div>
      )}

      {showTurnGate && (
        <div className="game-winner-dialog">
          <div className="dialog-content">
            <h2>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å</h2>
            <p>‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß {gatePlayer === "self" ? "Player 1" : "Player 2"}</p>
            <button
              onClick={() => {
                setCurrentPlayer(gatePlayer);
                setShowTurnGate(false);
                setGatePlayer(null);
              }}
            >
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
            </button>
          </div>
        </div>
      )}
    </div>
  );

}
